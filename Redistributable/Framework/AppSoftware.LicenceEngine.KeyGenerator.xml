<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AppSoftware.LicenceEngine.KeyGenerator</name>
    </assembly>
    <members>
        <member name="M:AppSoftware.LicenceEngine.KeyGenerator.ActivationKeyEncryption.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypt a byte array into a byte array using a key and an IV 
            </summary>
            <param name="clearData"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyGenerator.ActivationKeyEncryption.Encrypt(System.String,System.String)">
            <summary>
            Encrypt a string into a string using a password. Uses Encrypt(byte[], byte[], byte[]) 
            </summary>
            <param name="clearText"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyGenerator.ActivationKeyEncryption.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypt bytes into bytes using a password. Uses Encrypt(byte[], byte[], byte[])
            </summary>
            <param name="clearData"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:AppSoftware.LicenceEngine.KeyGenerator.ActivationKeyXmlWriter">
            <summary>
            ActivationKeyXmlWriter allows us to create an xml that can be written to a file and parsed
            by the licence engine key generator to decide if the running version is properly licenced.
            </summary> 
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyGenerator.ActivationKeyXmlWriter.WriteActivationKeyFileXml(System.String,System.IO.Stream,System.String)">
            <summary>
            Writes XML for an activation key file to the specified stream.
            </summary>
            <param name="licenceKeyFileEncryptionKey">An encryption key which the activation key will be encyrpted with</param>
            <param name="outputStream">The stream to output activation key XML to.</param>
            <param name="licenceKey">
            The licence key to put into the activation key file.
            </param>
        </member>
        <member name="T:AppSoftware.LicenceEngine.KeyGenerator.PkvLicenceKeyGenerator">
            <summary>
            Cognize Ltd 2013 PKV (Partial Key Verification) implementation in C#
            
            </summary>
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyGenerator.PkvLicenceKeyGenerator.MakeKey(System.Int32,AppSoftware.LicenceEngine.Common.KeyByteSet[])">
            <summary>
            Generate a new key given a seed value. This seed should be unique so that where licences are blacklisted, 
            we only blacklist one key. Store the seed when generating new licences, or put in place some other mechanism so that
            the key will not be repeated for the same application. This seed does not necessarily have to be randomised.
            </summary>
            <param name="seed">Random number</param>
            <param name="keyByteSets">A list of key bytes that will be used to produce the key</param>
            <returns></returns>
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyGenerator.PkvLicenceKeyGenerator.GetKeyByte(System.Int64,System.Byte,System.Byte,System.Byte)">
            <summary>
            Given a seed and some input bytes, generate a single byte to return. This should 
            be used with randomised data, that can be represented to retrieve the same key.
            </summary>
            <param name="seed"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyGenerator.PkvLicenceKeyGenerator.GetChecksum(System.String)">
            <summary>
            Generate a new checksum for a key
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:AppSoftware.LicenceEngine.KeyGenerator.PkvLicenceKeyGenerator.AssemblyDirectory">
            <summary>
            Retrieve the directory path for where the executing assembly resides.
            </summary>
        </member>
    </members>
</doc>
