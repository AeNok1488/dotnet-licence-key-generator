<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AppSoftware.LicenceEngine.KeyVerification</name>
    </assembly>
    <members>
        <member name="T:AppSoftware.LicenceEngine.KeyVerification.ActivationKeyFileCheck">
            <summary>
            Provides means of verifying a licence key file
            </summary>
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyVerification.ActivationKeyFileCheck.CheckActivationKeyFile(System.String,AppSoftware.LicenceEngine.Common.KeyByteSet,AppSoftware.LicenceEngine.Common.KeyByteSet,System.String,System.String)">
            <summary>
            Check activation key file for valid licence key or trial period value
            </summary>
            <param name="activationKeyFileFullPath">The absolute local path where the activation key file exists</param>
            <param name="keyByteSet2"> </param>
            <param name="licenceKeyFileEncryptionString">An encryption key which the licence key XML will be decrypted with</param>
            <param name="friendlyApplicationName">A friendly application name for error reporting e.g. 'My Licenced Application'</param>
            <param name="keyByteSet1"> </param>
        </member>
        <member name="T:AppSoftware.LicenceEngine.KeyVerification.PkvKeyCheck">
            <summary>
            Provides methods for verifying a licence key.
            </summary>
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyVerification.PkvKeyCheck.CheckKey(System.String,AppSoftware.LicenceEngine.Common.KeyByteSet[],System.Int32,System.String[])">
            <summary>
            Check a given key for validity
            </summary>
            <param name="key">The full key</param>
            <param name="keyByteSetsToCheck">The KeyBytes that are to be tested in this check</param>
            <param name="totalKeyByteSets">The total number of KeyBytes used to make the key</param>
            <param name="blackListedSeeds">Any seed values (hex string representation) that should be banned</param>
            <returns></returns>
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyVerification.PkvKeyCheck.GetKeySubstringStart(System.Int32)">
            <summary>
            Short hand way of creating pattern 8, 10, 12, 14
            </summary>
            <param name="keyByteNo"></param>
            <returns></returns>
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyVerification.PkvKeyCheck.CheckKeyChecksum(System.String,System.Int32)">
            <summary>
            Indicate if the check sum portion of the key is valid
            </summary>
            <param name="key"></param>
            <param name="totalKeyByteSets"> </param>
            <returns></returns>
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyVerification.PkvKeyCheck.FormatKeyForCompare(System.String)">
            <summary>
            Strip padding chars for comparison
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyVerification.PkvKeyCheck.GetKeyByte(System.Int64,System.Byte,System.Byte,System.Byte)">
            <summary>
            Given a seed and some input bytes, generate a single byte to return. This should 
            be used with randomised data, that can be represented to retrieve the same key.
            </summary>
            <param name="seed"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyVerification.PkvKeyCheck.GetChecksum(System.String)">
            <summary>
            Generate a new checksum for a key
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyVerification.ActivationKeyDecryption.Decrypt(System.String,System.String)">
            <summary>
            Decrypt a string into a string using a custom password. Uses Decrypt(byte[], byte[], byte[]) </summary>
            <param name="cipherText"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:AppSoftware.LicenceEngine.KeyVerification.ActivationKeyDecryption.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypt a byte array into a byte array using a key and an IV 
            </summary>
            <param name="cipherData"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
    </members>
</doc>
